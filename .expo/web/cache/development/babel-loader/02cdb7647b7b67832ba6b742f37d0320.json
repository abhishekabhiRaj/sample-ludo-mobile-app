{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport UUID from 'uuid-js';\nimport { guardPermission, getExponentPushTokenAsync, getDevicePushTokenAsync } from \"./ExponentNotificationsHelper.web\";\nimport \"./ExponentNotifications.fx.web\";\n\nfunction transformLocalNotification(notification, tag) {\n  var _notification$web = notification.web,\n      web = _notification$web === void 0 ? {} : _notification$web,\n      abstractNotification = _objectWithoutProperties(notification, [\"web\"]);\n\n  tag = web.tag || tag;\n\n  var nativeNotification = _objectSpread({}, abstractNotification, {\n    tag: tag\n  }, web, {\n    _isLocal: true\n  });\n\n  return [nativeNotification.title, nativeNotification];\n}\n\nfunction generateID() {\n  return UUID.create().toString();\n}\n\nfunction getRegistrationAsync() {\n  var registration;\n  return _regeneratorRuntime.async(function getRegistrationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          guardPermission();\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.getRegistration());\n\n        case 3:\n          registration = _context.sent;\n\n          if (registration) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('Failed to get notification registration!');\n\n        case 6:\n          return _context.abrupt(\"return\", registration);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nfunction getNotificationsAsync(tag) {\n  var registration, notifications;\n  return _regeneratorRuntime.async(function getNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getRegistrationAsync());\n\n        case 2:\n          registration = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(registration.getNotifications(tag ? {\n            tag: tag\n          } : undefined));\n\n        case 5:\n          notifications = _context2.sent;\n          return _context2.abrupt(\"return\", notifications);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nexport default {\n  presentLocalNotification: function presentLocalNotification(notification) {\n    var registration, tag;\n    return _regeneratorRuntime.async(function presentLocalNotification$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(getRegistrationAsync());\n\n          case 2:\n            registration = _context3.sent;\n            tag = generateID();\n            registration.showNotification.apply(registration, _toConsumableArray(transformLocalNotification(notification, tag)));\n            return _context3.abrupt(\"return\", tag);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  },\n  scheduleLocalNotification: function scheduleLocalNotification(notification) {\n    var options,\n        registration,\n        tag,\n        intervalMs,\n        _args4 = arguments;\n    return _regeneratorRuntime.async(function scheduleLocalNotification$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n\n            if (!options.intervalMs) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(getRegistrationAsync());\n\n          case 4:\n            registration = _context4.sent;\n            tag = generateID();\n            setTimeout(function () {\n              registration.showNotification.apply(registration, _toConsumableArray(transformLocalNotification(notification, tag)));\n            }, options.intervalMs);\n            return _context4.abrupt(\"return\", tag);\n\n          case 10:\n            if (!options.time) {\n              _context4.next = 15;\n              break;\n            }\n\n            intervalMs = options.time - Date.now();\n\n            if (!(intervalMs < 0)) {\n              _context4.next = 14;\n              break;\n            }\n\n            throw new Error('Expo.Notifications.scheduleLocalNotification(): options.time must be some time in the future.');\n\n          case 14:\n            return _context4.abrupt(\"return\", this.scheduleLocalNotification(notification, {\n              intervalMs: intervalMs\n            }));\n\n          case 15:\n            throw new Error(\"Expo.Notifications.scheduleLocalNotification() options \" + JSON.stringify(options, null, 2) + \" are not supported yet.\");\n\n          case 16:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, this);\n  },\n  dismissNotification: async function dismissNotification(notificationId) {\n    var notifications = await getNotificationsAsync(notificationId);\n\n    for (var _iterator = notifications, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _notification = _ref;\n\n      _notification.close();\n    }\n  },\n\n  async dismissAllNotifications() {\n    this.dismissNotification();\n  },\n\n  async cancelScheduledNotificationAsync(notificationId) {\n    this.dismissNotification(notificationId);\n  },\n\n  async cancelAllScheduledNotificationsAsync() {\n    this.dismissNotification();\n  },\n\n  async getExponentPushTokenAsync() {\n    return await getExponentPushTokenAsync();\n  },\n\n  async getDevicePushTokenAsync() {\n    return await getDevicePushTokenAsync();\n  }\n\n};","map":{"version":3,"sources":["../../src/Notifications/ExponentNotifications.web.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,IAAP,MAAiB,SAAjB;AAGA,SACE,eADF,EAEE,yBAFF,EAGE,uBAHF;AAOA;;AAEA,SAAS,0BAAT,CACE,YADF,EAEE,GAFF,EAEa;EAAA,wBAEmC,YAFnC,CAEH,GAFG;EAAA,IAEH,GAFG,kCAEG,EAFH;EAAA,IAEU,oBAFV,4BAEmC,YAFnC;;EAGX,GAAG,GAAG,GAAG,CAAC,GAAJ,IAAW,GAAjB;;EACA,IAAM,kBAAkB,qBACnB,oBADmB;IAEtB,GAAG,EAAH;EAFsB,GAGnB,GAHmB;IAKtB,QAAQ,EAAE;EALY,EAAxB;;EAOA,OAAO,CAAC,kBAAkB,CAAC,KAApB,EAA2B,kBAA3B,CAAP;AACD;;AAED,SAAS,UAAT,GAAmB;EACjB,OAAO,IAAI,CAAC,MAAL,GAAc,QAAd,EAAP;AACD;;AAED,SAAe,oBAAf;EAAA;EAAA;IAAA;MAAA;QAAA;UACE,eAAe;UADjB;UAAA,iCAE6B,SAAS,CAAC,aAAV,CAAwB,eAAxB,EAF7B;;QAAA;UAEQ,YAFR;;UAAA,IAGO,YAHP;YAAA;YAAA;UAAA;;UAAA,MAIU,IAAI,KAAJ,CAAU,0CAAV,CAJV;;QAAA;UAAA,iCAMS,YANT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AASA,SAAe,qBAAf,CAAqC,GAArC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCAC6B,oBAAoB,EADjD;;QAAA;UACQ,YADR;UAAA;UAAA,iCAE8B,YAAY,CAAC,gBAAb,CAA8B,GAAG,GAAG;YAAE,GAAG,EAAH;UAAF,CAAH,GAAa,SAA9C,CAF9B;;QAAA;UAEQ,aAFR;UAAA,kCAGS,aAHT;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAMA,eAAe;EACP,wBADO,oCACkB,YADlB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCAEgB,oBAAoB,EAFpC;;UAAA;YAEL,YAFK;YAGL,GAHK,GAGC,UAAU,EAHX;YAIX,YAAY,CAAC,gBAAb,OAAA,YAAY,qBAAqB,0BAA0B,CAAC,YAAD,EAAe,GAAf,CAA/C,EAAZ;YAJW,kCAKJ,GALI;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAOP,yBAPO,qCAQX,YARW;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YASX,OATW,8DAaP,EAbO;;YAAA,KAeP,OAAO,CAAC,UAfD;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAgBkB,oBAAoB,EAhBtC;;UAAA;YAgBH,YAhBG;YAiBH,GAjBG,GAiBG,UAAU,EAjBb;YAkBT,UAAU,CAAC,YAAK;cACd,YAAY,CAAC,gBAAb,OAAA,YAAY,qBAAqB,0BAA0B,CAAC,YAAD,EAAe,GAAf,CAA/C,EAAZ;YACD,CAFS,EAEP,OAAO,CAAC,UAFD,CAAV;YAlBS,kCAqBF,GArBE;;UAAA;YAAA,KAsBA,OAAO,CAAC,IAtBR;cAAA;cAAA;YAAA;;YAuBH,UAvBG,GAuBW,OAAO,CAAC,IAAR,GAA0B,IAAI,CAAC,GAAL,EAvBrC;;YAAA,MAwBL,UAAU,GAAG,CAxBR;cAAA;cAAA;YAAA;;YAAA,MAyBD,IAAI,KAAJ,CACJ,+FADI,CAzBC;;UAAA;YAAA,kCA6BF,KAAK,yBAAL,CAA+B,YAA/B,EAA6C;cAClD,UAAU,EAAV;YADkD,CAA7C,CA7BE;;UAAA;YAAA,MAiCL,IAAI,KAAJ,6DACsD,IAAI,CAAC,SAAL,CACxD,OADwD,EAExD,IAFwD,EAGxD,CAHwD,CADtD,6BAjCK;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EA0CP,mBA1CO,qCA0Ca,cA1Cb,EA0CoC;IAC/C,IAAM,aAAa,GAAG,MAAM,qBAAqB,CAAC,cAAD,CAAjD;;IACA,qBAA2B,aAA3B,gKAA0C;MAAA;;MAAA;QAAA;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;;MAAA,IAA/B,aAA+B;;MACxC,aAAY,CAAC,KAAb;IACD;EACF,CA/CY;;EAgDb,MAAM,uBAAN,GAA6B;IAC3B,KAAK,mBAAL;EACD,CAlDY;;EAmDb,MAAM,gCAAN,CAAuC,cAAvC,EAA6D;IAC3D,KAAK,mBAAL,CAAyB,cAAzB;EACD,CArDY;;EAsDb,MAAM,oCAAN,GAA0C;IACxC,KAAK,mBAAL;EACD,CAxDY;;EA0Db,MAAM,yBAAN,GAA+B;IAC7B,OAAO,MAAM,yBAAyB,EAAtC;EACD,CA5DY;;EA8Db,MAAM,uBAAN,GAA6B;IAC3B,OAAO,MAAM,uBAAuB,EAApC;EACD;;AAhEY,CAAf","sourcesContent":["import UUID from 'uuid-js';\n\nimport { LocalNotification, LocalNotificationId } from './Notifications.types';\nimport {\n  guardPermission,\n  getExponentPushTokenAsync,\n  getDevicePushTokenAsync,\n} from './ExponentNotificationsHelper.web';\n\n// Register `message`'s event listener (side-effect)\nimport './ExponentNotifications.fx.web';\n\nfunction transformLocalNotification(\n  notification: LocalNotification,\n  tag: string\n): [string, NotificationOptions] {\n  const { web = {}, ...abstractNotification } = notification;\n  tag = web.tag || tag;\n  const nativeNotification = {\n    ...abstractNotification,\n    tag,\n    ...web,\n    // Show that this notification is a local notification\n    _isLocal: true,\n  };\n  return [nativeNotification.title, nativeNotification];\n}\n\nfunction generateID(): string {\n  return UUID.create().toString();\n}\n\nasync function getRegistrationAsync(): Promise<ServiceWorkerRegistration> {\n  guardPermission();\n  const registration = await navigator.serviceWorker.getRegistration();\n  if (!registration) {\n    throw new Error('Failed to get notification registration!');\n  }\n  return registration;\n}\n\nasync function getNotificationsAsync(tag?: string): Promise<Notification[]> {\n  const registration = await getRegistrationAsync();\n  const notifications = await registration.getNotifications(tag ? { tag } : undefined);\n  return notifications;\n}\n\nexport default {\n  async presentLocalNotification(notification: LocalNotification): Promise<LocalNotificationId> {\n    const registration = await getRegistrationAsync();\n    const tag = generateID();\n    registration.showNotification(...transformLocalNotification(notification, tag));\n    return tag;\n  },\n  async scheduleLocalNotification(\n    notification: any,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<string> {\n    if (options.intervalMs) {\n      const registration = await getRegistrationAsync();\n      const tag = generateID();\n      setTimeout(() => {\n        registration.showNotification(...transformLocalNotification(notification, tag));\n      }, options.intervalMs);\n      return tag;\n    } else if (options.time) {\n      const intervalMs = (options.time as number) - Date.now();\n      if (intervalMs < 0) {\n        throw new Error(\n          'Expo.Notifications.scheduleLocalNotification(): options.time must be some time in the future.'\n        );\n      }\n      return this.scheduleLocalNotification(notification, {\n        intervalMs,\n      });\n    }\n    throw new Error(\n      `Expo.Notifications.scheduleLocalNotification() options ${JSON.stringify(\n        options,\n        null,\n        2\n      )} are not supported yet.`\n    );\n  },\n\n  async dismissNotification(notificationId?: string): Promise<void> {\n    const notifications = await getNotificationsAsync(notificationId);\n    for (const notification of notifications) {\n      notification.close();\n    }\n  },\n  async dismissAllNotifications(): Promise<void> {\n    this.dismissNotification();\n  },\n  async cancelScheduledNotificationAsync(notificationId: string): Promise<void> {\n    this.dismissNotification(notificationId);\n  },\n  async cancelAllScheduledNotificationsAsync(): Promise<void> {\n    this.dismissNotification();\n  },\n\n  async getExponentPushTokenAsync(): Promise<string> {\n    return await getExponentPushTokenAsync();\n  },\n\n  async getDevicePushTokenAsync(): Promise<{ type: string; data: Object }> {\n    return await getDevicePushTokenAsync();\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
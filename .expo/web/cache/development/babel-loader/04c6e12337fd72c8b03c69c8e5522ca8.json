{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform } from '@unimodules/core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport { getEmbeddedAssetUri } from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { downloadAsync as _downloadAsync, IS_MANAGED_ENV } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nexport var Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n        type = _ref.type,\n        _ref$hash = _ref.hash,\n        hash = _ref$hash === void 0 ? null : _ref$hash,\n        uri = _ref.uri,\n        width = _ref.width,\n        height = _ref.height;\n\n    _classCallCheck(this, Asset);\n\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  _createClass(Asset, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      var _this = this;\n\n      var _await$ImageAssets$ge, width, height, name;\n\n      return _regeneratorRuntime.async(function downloadAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.downloaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (!this.downloading) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                _this._downloadCallbacks.push({\n                  resolve: resolve,\n                  reject: reject\n                });\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\");\n\n            case 6:\n              this.downloading = true;\n              _context.prev = 7;\n\n              if (!(Platform.OS === 'web')) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!ImageAssets.isImageType(this.type)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n\n            case 12:\n              _await$ImageAssets$ge = _context.sent;\n              width = _await$ImageAssets$ge.width;\n              height = _await$ImageAssets$ge.height;\n              name = _await$ImageAssets$ge.name;\n              this.width = width;\n              this.height = height;\n              this.name = name;\n              _context.next = 22;\n              break;\n\n            case 21:\n              this.name = AssetUris.getFilename(this.uri);\n\n            case 22:\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n\n            case 24:\n              this.localUri = _context.sent;\n              this.downloaded = true;\n\n              this._downloadCallbacks.forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve();\n              });\n\n              _context.next = 33;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](7);\n\n              this._downloadCallbacks.forEach(function (_ref3) {\n                var reject = _ref3.reject;\n                return reject(_context.t0);\n              });\n\n              throw _context.t0;\n\n            case 33:\n              _context.prev = 33;\n              this.downloading = false;\n              this._downloadCallbacks = [];\n              return _context.finish(33);\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 29, 33, 37]]);\n    }\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n\n      var meta = getAssetByID(virtualAssetModule);\n\n      if (!meta) {\n        throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n      }\n\n      if (!IS_MANAGED_ENV) {\n        var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n            uri = _resolveAssetSource.uri;\n\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n        throw new Error('Assets must be initialized with Asset.fromModule');\n      }\n\n      var _AssetSources$selectA = AssetSources.selectAssetSource(meta),\n          uri = _AssetSources$selectA.uri,\n          hash = _AssetSources$selectA.hash;\n\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n\n      var type = '';\n\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n\n  return Asset;\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport { getEmbeddedAssetUri } from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\nimport { downloadAsync, IS_MANAGED_ENV } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    // This only applies to assets that are bundled in Expo standalone apps\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_MANAGED_ENV) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/admin/Desktop/Projects/react-native/Gautam-Ludo-Game/node_modules/@expo/vector-icons/build/createIconSet.js\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n\n  var font = _defineProperty({}, fontName, expoAssetId);\n\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._mounted = true;\n\n                if (this.state.fontIsLoaded) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(Font.loadAsync(font));\n\n              case 4:\n                this._mounted && this.setState({\n                  fontIsLoaded: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (!this.state.fontIsLoaded) {\n          return React.createElement(Text, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            }\n          });\n        }\n\n        return React.createElement(RNVIconComponent, _extends({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          }\n        }));\n      }\n    }]);\n\n    return Icon;\n  }(React.Component), _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAP,MAAkB,OAAlB;;AAEA,OAAO,KAAK,IAAZ,MAAsB,WAAtB;AACA,OAAO,aAAP;AACA,OAAO,yBAAP;AAEA,SACE,kBADF,EAEE,iBAFF;AAKA,eAAc,UAAU,QAAV,EAAoB,QAApB,EAA8B,WAA9B,EAA2C,SAA3C,EAA0D;;;EACtE,IAAM,IAAI,uBAAM,QAAN,EAAiB,WAAjB,CAAV;;EACA,IAAM,gBAAgB,GAAG,aAAa,CAAC,QAAD,EAAW,QAAX,EAAqB,IAArB,EAA2B,SAA3B,CAAtC;EAEA,OAAA,EAAA;IAAA;;IAAO,gBAAA;MAAA;;MAAA;;;MAUL,MAAA,QAAA,GAAW,KAAX;MAGA,MAAA,KAAA,GAAQ;QACN,YAAY,EAAE,IAAI,CAAC,QAAL,CAAc,QAAd;MADR,CAAR;MAbK;IAiDN;;IAjDD;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAkBI,KAAK,QAAL,GAAgB,IAAhB;;gBAlBJ,IAmBS,KAAK,KAAL,CAAW,YAnBpB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,iCAoBY,IAAI,CAAC,SAAL,CAAe,IAAf,CApBZ;;cAAA;gBAqBM,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc;kBAAE,YAAY,EAAE;gBAAhB,CAAd,CAAjB;;cArBN;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAAA;MAAA;MAAA,uCAyBsB;QAClB,KAAK,QAAL,GAAgB,KAAhB;MACD;IA3BH;MAAA;MAAA,+BA6BiB,KA7BjB,EA6BsB;QAClB,IAAI,KAAK,KAAT,EAAgB;UACd,KAAK,KAAL,CAAW,cAAX,CAA0B,KAA1B;QACD;MACF;IAjCH;MAAA;MAAA,yBAmCQ;QAAA;;QACJ,IAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,EAA8B;UAC5B,OAAO,oBAAC,IAAD;YAAA;cAAA;cAAA;YAAA;UAAA,EAAP;QACD;;QAED,OACE,oBAAC,gBAAD;UACE,GAAG,EAAE,aAAA,IAAI,EAAG;YACV,MAAI,CAAC,KAAL,GAAa,IAAb;UACD;QAHH,GAIM,KAAK,KAJX;UAAA;YAAA;YAAA;UAAA;QAAA,GADF;MAQD;IAhDH;;IAAA;EAAA,EAA0B,KAAK,CAAC,SAAhC,CAAA,EACS,EAAA,CAAA,SAAA,GAAY,gBAAgB,CAAC,SADtC,EAES,EAAA,CAAA,YAAA,GAAe,gBAAgB,CAAC,YAFzC,EAGS,EAAA,CAAA,MAAA,GAAS,yBAAyB,CAAC,EAAD,CAH3C,EAIS,EAAA,CAAA,QAAA,GAAW,QAJpB,EAKS,EAAA,CAAA,cAAA,GAAiB;IAAA,OAAM,QAAN;EAAA,CAL1B,EAMS,EAAA,CAAA,aAAA,GAAgB;IAAA,OAAM,QAAN;EAAA,CANzB,EAOS,EAAA,CAAA,QAAA,GAAW;IAAA,OAAM,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN;EAAA,CAPpB,EAQS,EAAA,CAAA,IAAA,GAAO,IARhB,EAiDE,EAjDF;AAkDD","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport default function(glyphMap, fontName, expoAssetId, fontStyle?: any) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
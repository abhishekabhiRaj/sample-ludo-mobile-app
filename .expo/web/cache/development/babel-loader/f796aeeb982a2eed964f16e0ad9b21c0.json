{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Constants from 'expo-constants';\nimport { EventEmitter } from 'fbemitter';\nimport invariant from 'invariant';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodedError, RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport ExponentNotifications from \"./ExponentNotifications\";\n\nvar _emitter;\n\nvar _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.notification', emitNotification);\n  }\n}\n\nexport function emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  notification = _objectSpread({}, notification);\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {}\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = _extends({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = _extends(notification, notification.ios);\n      notification.data._displayInForeground = notification.ios._displayInForeground;\n      delete notification.ios;\n    }\n  }\n\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = _extends(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(!!notification.title && !!notification.body, 'Local notifications on iOS require both a title and a body');\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nvar ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\nvar IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';\n\nfunction _legacyReadChannel(id) {\n  var channelString;\n  return _regeneratorRuntime.async(function _legacyReadChannel$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"\" + ASYNC_STORAGE_PREFIX + id));\n\n        case 3:\n          channelString = _context.sent;\n\n          if (!channelString) {\n            _context.next = 6;\n            break;\n          }\n\n          return _context.abrupt(\"return\", JSON.parse(channelString));\n\n        case 6:\n          _context.next = 10;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n\n        case 10:\n          return _context.abrupt(\"return\", null);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]]);\n}\n\nfunction _legacyDeleteChannel(id) {\n  return AsyncStorage.removeItem(\"\" + ASYNC_STORAGE_PREFIX + id);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = function _callee(callback) {\n    var keys, filteredKeys;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n          case 3:\n            keys = _context2.sent;\n\n            if (!(keys && keys.length)) {\n              _context2.next = 8;\n              break;\n            }\n\n            filteredKeys = keys.filter(function (key) {\n              return !key.startsWith(ASYNC_STORAGE_PREFIX);\n            });\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(AsyncStorage.multiRemove(filteredKeys));\n\n          case 8:\n            callback && callback();\n            _context2.next = 15;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            callback && callback(_context2.t0);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 11]]);\n  };\n}\n\nfunction _legacySaveChannel(id, channel) {\n  return AsyncStorage.setItem(\"\" + ASYNC_STORAGE_PREFIX + id, JSON.stringify(channel));\n}\n\nexport default {\n  _setInitialNotification: function _setInitialNotification(notification) {\n    _initialNotification = notification;\n  },\n  createCategoryAsync: function createCategoryAsync(categoryId, actions) {\n    return ExponentNotifications.createCategoryAsync(categoryId, actions);\n  },\n  deleteCategoryAsync: function deleteCategoryAsync(categoryId) {\n    return ExponentNotifications.deleteCategoryAsync(categoryId);\n  },\n  getExpoPushTokenAsync: function getExpoPushTokenAsync() {\n    if (!ExponentNotifications.getExponentPushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');\n    }\n\n    if (!Constants.isDevice) {\n      throw new Error(\"Must be on a physical device to get an Expo Push Token\");\n    }\n\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n  getDevicePushTokenAsync: function getDevicePushTokenAsync(config) {\n    if (!ExponentNotifications.getDevicePushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');\n    }\n\n    return ExponentNotifications.getDevicePushTokenAsync(config || {});\n  },\n  createChannelAndroidAsync: function createChannelAndroidAsync(id, channel) {\n    if (Platform.OS !== 'android') {\n      console.warn(\"createChannelAndroidAsync(...) has no effect on \" + Platform.OS);\n      return Promise.resolve();\n    }\n\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n\n    return ExponentNotifications.createChannel(id, channel);\n  },\n  deleteChannelAndroidAsync: function deleteChannelAndroidAsync(id) {\n    if (Platform.OS !== 'android') {\n      console.warn(\"deleteChannelAndroidAsync(...) has no effect on \" + Platform.OS);\n      return Promise.resolve();\n    }\n\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n\n    return ExponentNotifications.deleteChannel(id);\n  },\n  presentLocalNotificationAsync: function presentLocalNotificationAsync(notification) {\n    var nativeNotification, _channel;\n\n    return _regeneratorRuntime.async(function presentLocalNotificationAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _validateNotification(notification);\n\n            nativeNotification = _processNotification(notification);\n\n            if (!(Platform.OS !== 'android')) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(ExponentNotifications.presentLocalNotification(nativeNotification));\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 8:\n            if (!nativeNotification.channelId) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 11;\n            return _regeneratorRuntime.awrap(_legacyReadChannel(nativeNotification.channelId));\n\n          case 11:\n            _channel = _context3.sent;\n\n          case 12:\n            if (!IS_USING_NEW_BINARY) {\n              _context3.next = 17;\n              break;\n            }\n\n            _legacyDeleteChannel(nativeNotification.channelId);\n\n            return _context3.abrupt(\"return\", ExponentNotifications.presentLocalNotificationWithChannel(nativeNotification, _channel));\n\n          case 17:\n            if (_channel) {\n              nativeNotification.sound = _channel.sound;\n              nativeNotification.priority = _channel.priority;\n              nativeNotification.vibrate = _channel.vibrate;\n            }\n\n            return _context3.abrupt(\"return\", ExponentNotifications.presentLocalNotification(nativeNotification));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  },\n  scheduleLocalNotificationAsync: function scheduleLocalNotificationAsync(notification) {\n    var options,\n        now,\n        nativeNotification,\n        timeAsDateObj,\n        validOptions,\n        _channel,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.async(function scheduleLocalNotificationAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n            now = Date.now();\n\n            _validateNotification(notification);\n\n            nativeNotification = _processNotification(notification);\n\n            if (!options.time) {\n              _context4.next = 11;\n              break;\n            }\n\n            timeAsDateObj = null;\n\n            if (options.time && typeof options.time === 'number') {\n              timeAsDateObj = new Date(options.time);\n\n              if (timeAsDateObj.toString() === 'Invalid Date') {\n                timeAsDateObj = null;\n              }\n            } else if (options.time && options.time instanceof Date) {\n              timeAsDateObj = options.time;\n            }\n\n            if (timeAsDateObj) {\n              _context4.next = 9;\n              break;\n            }\n\n            throw new Error(\"Provided value for \\\"time\\\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.\");\n\n          case 9:\n            if (timeAsDateObj.getTime() < now) {\n              console.warn(\"Provided value for \\\"time\\\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?\");\n            }\n\n            options = _objectSpread({}, options, {\n              time: timeAsDateObj.getTime()\n            });\n\n          case 11:\n            if (!(options.intervalMs != null && options.repeat != null)) {\n              _context4.next = 13;\n              break;\n            }\n\n            throw new Error(\"Pass either the \\\"repeat\\\" option or \\\"intervalMs\\\" option, not both\");\n\n          case 13:\n            if (!(options.repeat != null)) {\n              _context4.next = 17;\n              break;\n            }\n\n            validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n\n            if (validOptions.has(options.repeat)) {\n              _context4.next = 17;\n              break;\n            }\n\n            throw new Error(\"Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \\\"repeat\\\" option\");\n\n          case 17:\n            if (!(options.intervalMs != null)) {\n              _context4.next = 22;\n              break;\n            }\n\n            if (!(Platform.OS === 'ios')) {\n              _context4.next = 20;\n              break;\n            }\n\n            throw new Error(\"The \\\"intervalMs\\\" option is not supported on iOS\");\n\n          case 20:\n            if (!(options.intervalMs <= 0 || !Number.isInteger(options.intervalMs))) {\n              _context4.next = 22;\n              break;\n            }\n\n            throw new Error(\"Pass an integer greater than zero as the value for the \\\"intervalMs\\\" option\");\n\n          case 22:\n            if (!(Platform.OS !== 'android')) {\n              _context4.next = 29;\n              break;\n            }\n\n            if (!options.repeat) {\n              _context4.next = 26;\n              break;\n            }\n\n            console.warn('Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.');\n            return _context4.abrupt(\"return\", ExponentNotifications.legacyScheduleLocalRepeatingNotification(nativeNotification, options));\n\n          case 26:\n            return _context4.abrupt(\"return\", ExponentNotifications.scheduleLocalNotification(nativeNotification, options));\n\n          case 29:\n            if (!nativeNotification.channelId) {\n              _context4.next = 33;\n              break;\n            }\n\n            _context4.next = 32;\n            return _regeneratorRuntime.awrap(_legacyReadChannel(nativeNotification.channelId));\n\n          case 32:\n            _channel = _context4.sent;\n\n          case 33:\n            if (!IS_USING_NEW_BINARY) {\n              _context4.next = 38;\n              break;\n            }\n\n            _legacyDeleteChannel(nativeNotification.channelId);\n\n            return _context4.abrupt(\"return\", ExponentNotifications.scheduleLocalNotificationWithChannel(nativeNotification, options, _channel));\n\n          case 38:\n            if (_channel) {\n              nativeNotification.sound = _channel.sound;\n              nativeNotification.priority = _channel.priority;\n              nativeNotification.vibrate = _channel.vibrate;\n            }\n\n            return _context4.abrupt(\"return\", ExponentNotifications.scheduleLocalNotification(nativeNotification, options));\n\n          case 40:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  },\n  dismissNotificationAsync: function dismissNotificationAsync(notificationId) {\n    return _regeneratorRuntime.async(function dismissNotificationAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (ExponentNotifications.dismissNotification) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Expo.Notifications', 'dismissNotification');\n\n          case 2:\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(ExponentNotifications.dismissNotification(notificationId));\n\n          case 4:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  },\n  dismissAllNotificationsAsync: function dismissAllNotificationsAsync() {\n    return _regeneratorRuntime.async(function dismissAllNotificationsAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (ExponentNotifications.dismissAllNotifications) {\n              _context6.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');\n\n          case 2:\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(ExponentNotifications.dismissAllNotifications());\n\n          case 4:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    });\n  },\n  cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {\n    if (Platform.OS === 'android' && typeof notificationId === 'string') {\n      return ExponentNotifications.cancelScheduledNotificationWithStringIdAsync(notificationId);\n    }\n\n    return ExponentNotifications.cancelScheduledNotificationAsync(notificationId);\n  },\n  cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {\n    return ExponentNotifications.cancelAllScheduledNotificationsAsync();\n  },\n  addListener: function addListener(listener) {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      var initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(function () {\n        emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n  getBadgeNumberAsync: function getBadgeNumberAsync() {\n    return _regeneratorRuntime.async(function getBadgeNumberAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (ExponentNotifications.getBadgeNumberAsync) {\n              _context7.next = 2;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", 0);\n\n          case 2:\n            return _context7.abrupt(\"return\", ExponentNotifications.getBadgeNumberAsync());\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    });\n  },\n  setBadgeNumberAsync: function setBadgeNumberAsync(number) {\n    return _regeneratorRuntime.async(function setBadgeNumberAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (ExponentNotifications.setBadgeNumberAsync) {\n              _context8.next = 2;\n              break;\n            }\n\n            throw new UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');\n\n          case 2:\n            return _context8.abrupt(\"return\", ExponentNotifications.setBadgeNumberAsync(number));\n\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    });\n  },\n  scheduleNotificationWithCalendarAsync: function scheduleNotificationWithCalendarAsync(notification) {\n    var options,\n        areOptionsValid,\n        _args9 = arguments;\n    return _regeneratorRuntime.async(function scheduleNotificationWithCalendarAsync$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n            areOptionsValid = (options.month == null || isInRangeInclusive(options.month, 1, 12)) && (options.day == null || isInRangeInclusive(options.day, 1, 31)) && (options.hour == null || isInRangeInclusive(options.hour, 0, 23)) && (options.minute == null || isInRangeInclusive(options.minute, 0, 59)) && (options.second == null || isInRangeInclusive(options.second, 0, 59)) && (options.weekDay == null || isInRangeInclusive(options.weekDay, 1, 7)) && (options.weekDay == null || options.day == null);\n\n            if (areOptionsValid) {\n              _context9.next = 4;\n              break;\n            }\n\n            throw new CodedError('WRONG_OPTIONS', 'Options in scheduleNotificationWithCalendarAsync call were incorrect!');\n\n          case 4:\n            return _context9.abrupt(\"return\", ExponentNotifications.scheduleNotificationWithCalendar(notification, options));\n\n          case 5:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    });\n  },\n  scheduleNotificationWithTimerAsync: function scheduleNotificationWithTimerAsync(notification, options) {\n    return _regeneratorRuntime.async(function scheduleNotificationWithTimerAsync$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (!(options.interval < 1)) {\n              _context10.next = 2;\n              break;\n            }\n\n            throw new CodedError('WRONG_OPTIONS', 'Interval must be not less then 1');\n\n          case 2:\n            return _context10.abrupt(\"return\", ExponentNotifications.scheduleNotificationWithTimer(notification, options));\n\n          case 3:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    });\n  }\n};\n\nfunction isInRangeInclusive(variable, min, max) {\n  return variable >= min && variable <= max;\n}","map":{"version":3,"sources":["../../src/Notifications/Notifications.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport invariant from 'invariant';\nimport { AsyncStorage, Platform } from 'react-native';\nimport { CodedError, RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport ExponentNotifications from './ExponentNotifications';\nimport {\n  Notification,\n  LocalNotification,\n  Channel,\n  ActionType,\n  LocalNotificationId,\n} from './Notifications.types';\nlet _emitter;\nlet _initialNotification;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.notification', emitNotification);\n  }\n}\n\nexport function emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  /* Don't mutate the original notification */\n  notification = { ...notification };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {\n      // It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      notification.data._displayInForeground = notification.ios._displayInForeground;\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on root notification\n  // object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(!!notification.title, 'Local notifications on Android require a title');\n  }\n}\n\nlet ASYNC_STORAGE_PREFIX = '__expo_internal_channel_';\n// TODO: remove this before releasing\n// this will always be `true` for SDK 28+\nlet IS_USING_NEW_BINARY = typeof ExponentNotifications.createChannel === 'function';\n\nasync function _legacyReadChannel(id: string): Promise<Channel | null> {\n  try {\n    let channelString = await AsyncStorage.getItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n    if (channelString) {\n      return JSON.parse(channelString);\n    }\n  } catch (e) {}\n  return null;\n}\n\nfunction _legacyDeleteChannel(id: string): Promise<void> {\n  return AsyncStorage.removeItem(`${ASYNC_STORAGE_PREFIX}${id}`);\n}\n\nif (Platform.OS === 'android') {\n  AsyncStorage.clear = async function(callback?: (error?: Error) => void): Promise<void> {\n    try {\n      let keys = await AsyncStorage.getAllKeys();\n      if (keys && keys.length) {\n        let filteredKeys = keys.filter(key => !key.startsWith(ASYNC_STORAGE_PREFIX));\n        await AsyncStorage.multiRemove(filteredKeys);\n      }\n      callback && callback();\n    } catch (e) {\n      callback && callback(e);\n      throw e;\n    }\n  };\n}\n\n// This codepath will never be triggered in SDK 28 and above\n// TODO: remove before releasing\nfunction _legacySaveChannel(id: string, channel: Channel): Promise<void> {\n  return AsyncStorage.setItem(`${ASYNC_STORAGE_PREFIX}${id}`, JSON.stringify(channel));\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification: Notification) {\n    _initialNotification = notification;\n  },\n\n  // User passes set of actions titles.\n  createCategoryAsync(categoryId: string, actions: ActionType[]): Promise<void> {\n    return ExponentNotifications.createCategoryAsync(categoryId, actions);\n  },\n\n  deleteCategoryAsync(categoryId: string): Promise<void> {\n    return ExponentNotifications.deleteCategoryAsync(categoryId);\n  },\n\n  /* Re-export */\n  getExpoPushTokenAsync(): Promise<string> {\n    if (!ExponentNotifications.getExponentPushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getExpoPushTokenAsync');\n    }\n    if (!Constants.isDevice) {\n      throw new Error(`Must be on a physical device to get an Expo Push Token`);\n    }\n    return ExponentNotifications.getExponentPushTokenAsync();\n  },\n\n  getDevicePushTokenAsync: (config: {\n    gcmSenderId?: string;\n  }): Promise<{ type: string; data: string }> => {\n    if (!ExponentNotifications.getDevicePushTokenAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'getDevicePushTokenAsync');\n    }\n    return ExponentNotifications.getDevicePushTokenAsync(config || {});\n  },\n\n  createChannelAndroidAsync(id: string, channel: Channel): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`createChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return _legacySaveChannel(id, channel);\n    }\n    return ExponentNotifications.createChannel(id, channel);\n  },\n\n  deleteChannelAndroidAsync(id: string): Promise<void> {\n    if (Platform.OS !== 'android') {\n      console.warn(`deleteChannelAndroidAsync(...) has no effect on ${Platform.OS}`);\n      return Promise.resolve();\n    }\n    // This codepath will never be triggered in SDK 28 and above\n    // TODO: remove before releasing\n    if (!IS_USING_NEW_BINARY) {\n      return Promise.resolve();\n    }\n    return ExponentNotifications.deleteChannel(id);\n  },\n\n  /* Shows a notification instantly */\n  async presentLocalNotificationAsync(\n    notification: LocalNotification\n  ): Promise<LocalNotificationId> {\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    if (Platform.OS !== 'android') {\n      return await ExponentNotifications.presentLocalNotification(nativeNotification);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.presentLocalNotificationWithChannel(\n          nativeNotification,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.presentLocalNotification(nativeNotification);\n      }\n    }\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(\n    notification: LocalNotification,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<LocalNotificationId> {\n    // set now at the beginning of the method, to prevent potential weird warnings when we validate\n    // options.time later on\n    const now = Date.now();\n\n    // Validate and process the notification data\n    _validateNotification(notification);\n    let nativeNotification = _processNotification(notification);\n\n    // Validate `options.time`\n    if (options.time) {\n      let timeAsDateObj: Date | null = null;\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n        if (timeAsDateObj.toString() === 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      }\n\n      // If we couldn't convert properly, throw an error\n      if (!timeAsDateObj) {\n        throw new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n        );\n      }\n\n      // If someone passes in a value that is too small, say, by an order of 1000 (it's common to\n      // accidently pass seconds instead of ms), display a warning.\n      if (timeAsDateObj.getTime() < now) {\n        console.warn(\n          `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n        );\n      }\n\n      options = {\n        ...options,\n        time: timeAsDateObj.getTime(),\n      };\n    }\n\n    if (options.intervalMs != null && options.repeat != null) {\n      throw new Error(`Pass either the \"repeat\" option or \"intervalMs\" option, not both`);\n    }\n\n    // Validate options.repeat\n    if (options.repeat != null) {\n      const validOptions = new Set(['minute', 'hour', 'day', 'week', 'month', 'year']);\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(\n          `Pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n        );\n      }\n    }\n\n    if (options.intervalMs != null) {\n      if (Platform.OS === 'ios') {\n        throw new Error(`The \"intervalMs\" option is not supported on iOS`);\n      }\n\n      if (options.intervalMs <= 0 || !Number.isInteger(options.intervalMs)) {\n        throw new Error(\n          `Pass an integer greater than zero as the value for the \"intervalMs\" option`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'android') {\n      if (options.repeat) {\n        console.warn(\n          'Ability to schedule an automatically repeated notification is deprecated on iOS and will be removed in the next SDK release.'\n        );\n        return ExponentNotifications.legacyScheduleLocalRepeatingNotification(\n          nativeNotification,\n          options\n        );\n      }\n\n      return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n    } else {\n      let _channel;\n      if (nativeNotification.channelId) {\n        _channel = await _legacyReadChannel(nativeNotification.channelId);\n      }\n\n      if (IS_USING_NEW_BINARY) {\n        // delete the legacy channel from AsyncStorage so this codepath isn't triggered anymore\n        _legacyDeleteChannel(nativeNotification.channelId);\n        return ExponentNotifications.scheduleLocalNotificationWithChannel(\n          nativeNotification,\n          options,\n          _channel\n        );\n      } else {\n        // TODO: remove this codepath before releasing, it will never be triggered on SDK 28+\n        // channel does not actually exist, so add its settings to the individual notification\n        if (_channel) {\n          nativeNotification.sound = _channel.sound;\n          nativeNotification.priority = _channel.priority;\n          nativeNotification.vibrate = _channel.vibrate;\n        }\n        return ExponentNotifications.scheduleLocalNotification(nativeNotification, options);\n      }\n    }\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (!ExponentNotifications.dismissNotification) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissNotification');\n    }\n    return await ExponentNotifications.dismissNotification(notificationId);\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync(): Promise<void> {\n    if (!ExponentNotifications.dismissAllNotifications) {\n      throw new UnavailabilityError('Expo.Notifications', 'dismissAllNotifications');\n    }\n    return await ExponentNotifications.dismissAllNotifications();\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  cancelScheduledNotificationAsync(notificationId: LocalNotificationId): Promise<void> {\n    if (Platform.OS === 'android' && typeof notificationId === 'string') {\n      return ExponentNotifications.cancelScheduledNotificationWithStringIdAsync(notificationId);\n    }\n    return ExponentNotifications.cancelScheduledNotificationAsync(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  cancelAllScheduledNotificationsAsync(): Promise<void> {\n    return ExponentNotifications.cancelAllScheduledNotificationsAsync();\n  },\n\n  /* Primary public api */\n  addListener(listener: (notification: Notification) => unknown): EventSubscription {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number: number): Promise<void> {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      throw new UnavailabilityError('Expo.Notifications', 'setBadgeNumberAsync');\n    }\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  },\n\n  async scheduleNotificationWithCalendarAsync(\n    notification: LocalNotification,\n    options: {\n      year?: number;\n      month?: number;\n      hour?: number;\n      day?: number;\n      minute?: number;\n      second?: number;\n      weekDay?: number;\n      repeat?: boolean;\n    } = {}\n  ): Promise<string> {\n    const areOptionsValid: boolean =\n      (options.month == null || isInRangeInclusive(options.month, 1, 12)) &&\n      (options.day == null || isInRangeInclusive(options.day, 1, 31)) &&\n      (options.hour == null || isInRangeInclusive(options.hour, 0, 23)) &&\n      (options.minute == null || isInRangeInclusive(options.minute, 0, 59)) &&\n      (options.second == null || isInRangeInclusive(options.second, 0, 59)) &&\n      (options.weekDay == null || isInRangeInclusive(options.weekDay, 1, 7)) &&\n      (options.weekDay == null || options.day == null);\n\n    if (!areOptionsValid) {\n      throw new CodedError(\n        'WRONG_OPTIONS',\n        'Options in scheduleNotificationWithCalendarAsync call were incorrect!'\n      );\n    }\n\n    return ExponentNotifications.scheduleNotificationWithCalendar(notification, options);\n  },\n\n  async scheduleNotificationWithTimerAsync(\n    notification: LocalNotification,\n    options: {\n      interval: number;\n      repeat?: boolean;\n    }\n  ): Promise<string> {\n    if (options.interval < 1) {\n      throw new CodedError('WRONG_OPTIONS', 'Interval must be not less then 1');\n    }\n    return ExponentNotifications.scheduleNotificationWithTimer(notification, options);\n  },\n};\n\nfunction isInRangeInclusive(variable: number, min: number, max: number): boolean {\n  return variable >= min && variable <= max;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
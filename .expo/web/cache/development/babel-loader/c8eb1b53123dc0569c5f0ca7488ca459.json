{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nexport var Sound = function () {\n  function Sound() {\n    var _this = this;\n\n    _classCallCheck(this, Sound);\n\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n\n    this._internalStatusUpdateCallback = function (_ref) {\n      var key = _ref.key,\n          status = _ref.status;\n\n      if (_this._key === key) {\n        _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n\n    this._internalErrorCallback = function (_ref2) {\n      var key = _ref2.key,\n          error = _ref2.error;\n\n      if (_this._key === key) {\n        _this._errorCallback(error);\n      }\n    };\n\n    this._errorCallback = function (error) {\n      _this._clearSubscriptions();\n\n      _this._loaded = false;\n      _this._key = null;\n\n      _this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n\n    this.getStatusAsync = function _callee() {\n      var status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!_this._loaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getStatusForSound(_this._key);\n              }));\n\n            case 2:\n              status = getUnloadedStatus();\n\n              _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              return _context.abrupt(\"return\", status);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n  }\n\n  _createClass(Sound, [{\n    key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n    value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n      var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n      if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n        this._onPlaybackStatusUpdate(status);\n\n        this._lastStatusUpdateTime = new Date();\n        this._lastStatusUpdate = JSON.stringify(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n\n              if (!this._loaded) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n\n            case 4:\n              status = _context2.sent;\n\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              return _context2.abrupt(\"return\", status);\n\n            case 9:\n              throw new Error('Cannot complete operation because sound is not loaded.');\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"_subscribeToNativeEvents\",\n    value: function _subscribeToNativeEvents() {\n      if (this._loaded) {\n        this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n\n        this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"loadAsync\",\n    value: function loadAsync(source) {\n      var _this2 = this;\n\n      var initialStatus,\n          downloadFirst,\n          _await$getNativeSourc,\n          nativeSource,\n          fullInitialStatus,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.async(function loadAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n              throwIfAudioIsDisabled();\n\n              if (!this._loading) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error('The Sound is already loading.');\n\n            case 5:\n              if (this._loaded) {\n                _context3.next = 15;\n                break;\n              }\n\n              this._loading = true;\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst));\n\n            case 9:\n              _await$getNativeSourc = _context3.sent;\n              nativeSource = _await$getNativeSourc.nativeSource;\n              fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var loadSuccess = function loadSuccess(result) {\n                  var _result = _slicedToArray(result, 2),\n                      key = _result[0],\n                      status = _result[1];\n\n                  _this2._key = key;\n                  _this2._loaded = true;\n                  _this2._loading = false;\n\n                  _this2._subscribeToNativeEvents();\n\n                  _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                  resolve(status);\n                };\n\n                var loadError = function loadError(error) {\n                  _this2._loading = false;\n                  reject(error);\n                };\n\n                ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n              }));\n\n            case 15:\n              throw new Error('The Sound is already loaded.');\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"unloadAsync\",\n    value: function unloadAsync() {\n      var key, status;\n      return _regeneratorRuntime.async(function unloadAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!this._loaded) {\n                _context4.next = 12;\n                break;\n              }\n\n              this._loaded = false;\n              key = this._key;\n              this._key = null;\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadForSound(key));\n\n            case 6:\n              status = _context4.sent;\n\n              this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n              this._clearSubscriptions();\n\n              return _context4.abrupt(\"return\", status);\n\n            case 12:\n              return _context4.abrupt(\"return\", this.getStatusAsync());\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"setStatusAsync\",\n    value: function setStatusAsync(status) {\n      var _this3 = this;\n\n      return _regeneratorRuntime.async(function setStatusAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              assertStatusValuesInBounds(status);\n              return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.setStatusForSound(_this3._key, status);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"replayAsync\",\n    value: function replayAsync() {\n      var _this4 = this;\n\n      var status,\n          _args6 = arguments;\n      return _regeneratorRuntime.async(function replayAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n\n              if (!(status.positionMillis && status.positionMillis !== 0)) {\n                _context6.next = 3;\n                break;\n              }\n\n              throw new Error('Requested position after replay has to be 0.');\n\n            case 3:\n              return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.replaySound(_this4._key, _objectSpread({}, status, {\n                  positionMillis: 0,\n                  shouldPlay: true\n                }));\n              }));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Sound;\n}();\n\nSound.create = function _callee2(source) {\n  var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      _args7 = arguments;\n  return _regeneratorRuntime.async(function _callee2$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n          onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n          downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n          console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n          return _context7.abrupt(\"return\", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  });\n};\n\nSound.createAsync = function _callee3(source) {\n  var initialStatus,\n      onPlaybackStatusUpdate,\n      downloadFirst,\n      sound,\n      status,\n      _args8 = arguments;\n  return _regeneratorRuntime.async(function _callee3$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n          onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n          downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n          sound = new Sound();\n          sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n          _context8.next = 7;\n          return _regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n\n        case 7:\n          status = _context8.sent;\n          return _context8.abrupt(\"return\", {\n            sound: sound,\n            status: status\n          });\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  });\n};\n\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"sources":["../../src/Audio/Sound.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\ntype AudioInstance = number | HTMLMediaElement | null;\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: Array<{ remove: () => void }> = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null;\n\n  static create = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: PlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: PlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: PlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        )\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: PlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const {\n        nativeSource,\n        fullInitialStatus,\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n        source,\n        initialStatus,\n        downloadFirst\n      );\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<PlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, PlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n          .then(loadSuccess)\n          .catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<PlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: PlaybackStatusToSet): Promise<PlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
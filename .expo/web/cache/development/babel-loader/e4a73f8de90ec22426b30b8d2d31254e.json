{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { EventEmitter, Platform } from '@unimodules/core';\nimport { _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nimport { isAudioEnabled, throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { Sound } from \"./Sound\";\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\nexport var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nexport var RECORDING_OPTIONS_PRESET_LOW_QUALITY = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false\n  }\n};\nvar _recorderExists = false;\nvar eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\nexport var Recording = function () {\n  function Recording() {\n    var _this = this;\n\n    _classCallCheck(this, Recording);\n\n    this._subscription = null;\n    this._canRecord = false;\n    this._isDoneRecording = false;\n    this._finalDurationMillis = 0;\n    this._uri = null;\n    this._onRecordingStatusUpdate = null;\n    this._progressUpdateTimeoutVariable = null;\n    this._progressUpdateIntervalMillis = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n    this._options = null;\n\n    this._cleanupForUnloadedRecorder = function _callee(finalStatus) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this._canRecord = false;\n              _this._isDoneRecording = true;\n              _this._finalDurationMillis = finalStatus.durationMillis;\n              _recorderExists = false;\n\n              if (_this._subscription) {\n                _this._subscription.remove();\n\n                _this._subscription = null;\n              }\n\n              _this._disablePolling();\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 8:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    this._pollingLoop = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(isAudioEnabled() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {\n                _context2.next = 10;\n                break;\n              }\n\n              _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(_this.getStatusAsync());\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](2);\n\n              _this._disablePolling();\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 7]]);\n    };\n\n    this.getStatusAsync = function _callee3() {\n      var status;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!_this._canRecord) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.getAudioRecordingStatus();\n              }));\n\n            case 2:\n              status = {\n                canRecord: false,\n                isRecording: false,\n                isDoneRecording: _this._isDoneRecording,\n                durationMillis: _this._finalDurationMillis\n              };\n\n              _this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context3.abrupt(\"return\", status);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    };\n  }\n\n  _createClass(Recording, [{\n    key: \"_disablePolling\",\n    value: function _disablePolling() {\n      if (this._progressUpdateTimeoutVariable != null) {\n        clearTimeout(this._progressUpdateTimeoutVariable);\n        this._progressUpdateTimeoutVariable = null;\n      }\n    }\n  }, {\n    key: \"_enablePollingIfNecessaryAndPossible\",\n    value: function _enablePollingIfNecessaryAndPossible() {\n      if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n        this._disablePolling();\n\n        this._pollingLoop();\n      }\n    }\n  }, {\n    key: \"_callOnRecordingStatusUpdateForNewStatus\",\n    value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n      if (this._onRecordingStatusUpdate != null) {\n        this._onRecordingStatusUpdate(status);\n      }\n    }\n  }, {\n    key: \"_performOperationAndHandleStatusAsync\",\n    value: function _performOperationAndHandleStatusAsync(operation) {\n      var status;\n      return _regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              throwIfAudioIsDisabled();\n\n              if (!this._canRecord) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(operation());\n\n            case 4:\n              status = _context4.sent;\n\n              this._callOnRecordingStatusUpdateForNewStatus(status);\n\n              return _context4.abrupt(\"return\", status);\n\n            case 9:\n              throw new Error('Cannot complete operation because this recorder is not ready to record.');\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"setOnRecordingStatusUpdate\",\n    value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n      this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n\n      if (onRecordingStatusUpdate == null) {\n        this._disablePolling();\n      } else {\n        this._enablePollingIfNecessaryAndPossible();\n      }\n\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"setProgressUpdateInterval\",\n    value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n      this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"prepareToRecordAsync\",\n    value: function prepareToRecordAsync() {\n      var options,\n          extensionRegex,\n          _await$ExponentAV$pre,\n          uri,\n          status,\n          currentStatus,\n          _args5 = arguments;\n\n      return _regeneratorRuntime.async(function prepareToRecordAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n              throwIfAudioIsDisabled();\n\n              if (!_recorderExists) {\n                _context5.next = 4;\n                break;\n              }\n\n              throw new Error('Only one Recording object can be prepared at a given time.');\n\n            case 4:\n              if (!this._isDoneRecording) {\n                _context5.next = 6;\n                break;\n              }\n\n              throw new Error('This Recording object is done recording; you must make a new one.');\n\n            case 6:\n              if (!(!options || !options.android || !options.ios)) {\n                _context5.next = 8;\n                break;\n              }\n\n              throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n\n            case 8:\n              extensionRegex = /^\\.\\w+$/;\n\n              if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {\n                _context5.next = 11;\n                break;\n              }\n\n              throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n\n            case 11:\n              if (this._canRecord) {\n                _context5.next = 28;\n                break;\n              }\n\n              if (eventEmitter) {\n                this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n              }\n\n              _context5.next = 15;\n              return _regeneratorRuntime.awrap(ExponentAV.prepareAudioRecorder(options));\n\n            case 15:\n              _await$ExponentAV$pre = _context5.sent;\n              uri = _await$ExponentAV$pre.uri;\n              status = _await$ExponentAV$pre.status;\n              _recorderExists = true;\n              this._uri = uri;\n              this._options = options;\n              this._canRecord = true;\n              currentStatus = _objectSpread({}, status, {\n                canRecord: true\n              });\n\n              this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n\n              this._enablePollingIfNecessaryAndPossible();\n\n              return _context5.abrupt(\"return\", currentStatus);\n\n            case 28:\n              throw new Error('This Recording object is already prepared to record.');\n\n            case 29:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"startAsync\",\n    value: function startAsync() {\n      return _regeneratorRuntime.async(function startAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.startAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"pauseAsync\",\n    value: function pauseAsync() {\n      return _regeneratorRuntime.async(function pauseAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                return ExponentAV.pauseAudioRecording();\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"stopAndUnloadAsync\",\n    value: function stopAndUnloadAsync() {\n      var finalStatus;\n      return _regeneratorRuntime.async(function stopAndUnloadAsync$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this._canRecord) {\n                _context8.next = 6;\n                break;\n              }\n\n              if (!this._isDoneRecording) {\n                _context8.next = 5;\n                break;\n              }\n\n              throw new Error('Cannot unload a Recording that has already been unloaded.');\n\n            case 5:\n              throw new Error('Cannot unload a Recording that has not been prepared.');\n\n            case 6:\n              _context8.next = 8;\n              return _regeneratorRuntime.awrap(ExponentAV.stopAudioRecording());\n\n            case 8:\n              finalStatus = _context8.sent;\n              _context8.next = 11;\n              return _regeneratorRuntime.awrap(ExponentAV.unloadAudioRecorder());\n\n            case 11:\n              return _context8.abrupt(\"return\", this._cleanupForUnloadedRecorder(finalStatus));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI() {\n      return this._uri;\n    }\n  }, {\n    key: \"createNewLoadedSound\",\n    value: function createNewLoadedSound() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args9 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSound$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              initialStatus = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n              onPlaybackStatusUpdate = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : null;\n              console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n              return _context9.abrupt(\"return\", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"createNewLoadedSoundAsync\",\n    value: function createNewLoadedSoundAsync() {\n      var initialStatus,\n          onPlaybackStatusUpdate,\n          _args10 = arguments;\n      return _regeneratorRuntime.async(function createNewLoadedSoundAsync$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              initialStatus = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n              onPlaybackStatusUpdate = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : null;\n\n              if (!(this._uri == null || !this._isDoneRecording)) {\n                _context10.next = 4;\n                break;\n              }\n\n              throw new Error('Cannot create sound when the Recording has not finished!');\n\n            case 4:\n              return _context10.abrupt(\"return\", Sound.createAsync({\n                uri: this._uri\n              }, initialStatus, onPlaybackStatusUpdate, false));\n\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Recording;\n}();","map":{"version":3,"sources":["../../src/Audio/Recording.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, Platform } from '@unimodules/core';\n\nimport {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n} from '../AV';\n\nimport ExponentAV from '../ExponentAV';\nimport { isAudioEnabled, throwIfAudioIsDisabled } from './AudioAvailability';\n\nimport { Sound } from './Sound';\n\nexport type RecordingOptions = {\n  android: {\n    extension: string;\n    outputFormat: number;\n    audioEncoder: number;\n    sampleRate?: number;\n    numberOfChannels?: number;\n    bitRate?: number;\n    maxFileSize?: number;\n  };\n  ios: {\n    extension: string;\n    outputFormat?: string | number;\n    audioQuality: number;\n    sampleRate: number;\n    numberOfChannels: number;\n    bitRate: number;\n    bitRateStrategy?: number;\n    bitDepthHint?: number;\n    linearPCMBitDepth?: number;\n    linearPCMIsBigEndian?: boolean;\n    linearPCMIsFloat?: boolean;\n  };\n};\n\n// TODO: consider changing these to enums\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\nexport const RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\n\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\nexport const RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\n\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\nexport const RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\n\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\nexport const RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\n\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\nexport const RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\n\n// TODO : maybe make presets for music and speech, or lossy / lossless.\n\nexport const RECORDING_OPTIONS_PRESET_HIGH_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.m4a',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\nexport const RECORDING_OPTIONS_PRESET_LOW_QUALITY: RecordingOptions = {\n  android: {\n    extension: '.3gp',\n    outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n    audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n  },\n  ios: {\n    extension: '.caf',\n    audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n    sampleRate: 44100,\n    numberOfChannels: 2,\n    bitRate: 128000,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n};\n\n// TODO: For consistency with PlaybackStatus, should we include progressUpdateIntervalMillis here as\n// well?\nexport type RecordingStatus = {\n  canRecord: boolean;\n  isRecording: boolean;\n  isDoneRecording: boolean;\n  durationMillis: number;\n};\n\nlet _recorderExists: boolean = false;\nconst eventEmitter = Platform.OS === 'android' ? new EventEmitter(ExponentAV) : null;\n\nexport class Recording {\n  _subscription: Subscription | null = null;\n  _canRecord: boolean = false;\n  _isDoneRecording: boolean = false;\n  _finalDurationMillis: number = 0;\n  _uri: string | null = null;\n  _onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null = null;\n  _progressUpdateTimeoutVariable: number | null = null;\n  _progressUpdateIntervalMillis: number = _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n  _options: RecordingOptions | null = null;\n\n  // Internal methods\n\n  _cleanupForUnloadedRecorder = async (finalStatus: RecordingStatus) => {\n    this._canRecord = false;\n    this._isDoneRecording = true;\n    // $FlowFixMe(greg): durationMillis is not always defined\n    this._finalDurationMillis = finalStatus.durationMillis;\n    _recorderExists = false;\n    if (this._subscription) {\n      this._subscription.remove();\n      this._subscription = null;\n    }\n    this._disablePolling();\n    return await this.getStatusAsync(); // Automatically calls onRecordingStatusUpdate for the final state.\n  };\n\n  _pollingLoop = async () => {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._progressUpdateTimeoutVariable = setTimeout(\n        this._pollingLoop,\n        this._progressUpdateIntervalMillis\n      ) as any;\n      try {\n        await this.getStatusAsync();\n      } catch (error) {\n        this._disablePolling();\n      }\n    }\n  };\n\n  _disablePolling() {\n    if (this._progressUpdateTimeoutVariable != null) {\n      clearTimeout(this._progressUpdateTimeoutVariable);\n      this._progressUpdateTimeoutVariable = null;\n    }\n  }\n\n  _enablePollingIfNecessaryAndPossible() {\n    if (isAudioEnabled() && this._canRecord && this._onRecordingStatusUpdate != null) {\n      this._disablePolling();\n      this._pollingLoop();\n    }\n  }\n\n  _callOnRecordingStatusUpdateForNewStatus(status: RecordingStatus) {\n    if (this._onRecordingStatusUpdate != null) {\n      this._onRecordingStatusUpdate(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<RecordingStatus>\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n    if (this._canRecord) {\n      const status = await operation();\n      this._callOnRecordingStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because this recorder is not ready to record.');\n    }\n  }\n\n  // Note that all calls automatically call onRecordingStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<RecordingStatus> => {\n    // Automatically calls onRecordingStatusUpdate.\n    if (this._canRecord) {\n      return this._performOperationAndHandleStatusAsync(() => ExponentAV.getAudioRecordingStatus());\n    }\n    const status = {\n      canRecord: false,\n      isRecording: false,\n      isDoneRecording: this._isDoneRecording,\n      durationMillis: this._finalDurationMillis,\n    };\n    this._callOnRecordingStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnRecordingStatusUpdate(onRecordingStatusUpdate: ((status: RecordingStatus) => void) | null) {\n    this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n    if (onRecordingStatusUpdate == null) {\n      this._disablePolling();\n    } else {\n      this._enablePollingIfNecessaryAndPossible();\n    }\n    this.getStatusAsync();\n  }\n\n  setProgressUpdateInterval(progressUpdateIntervalMillis: number) {\n    this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n    this.getStatusAsync();\n  }\n\n  // Record API\n\n  async prepareToRecordAsync(\n    options: RecordingOptions = RECORDING_OPTIONS_PRESET_LOW_QUALITY\n  ): Promise<RecordingStatus> {\n    throwIfAudioIsDisabled();\n\n    if (_recorderExists) {\n      throw new Error('Only one Recording object can be prepared at a given time.');\n    }\n\n    if (this._isDoneRecording) {\n      throw new Error('This Recording object is done recording; you must make a new one.');\n    }\n\n    if (!options || !options.android || !options.ios) {\n      throw new Error(\n        'You must provide recording options for android and ios in order to prepare to record.'\n      );\n    }\n\n    const extensionRegex = /^\\.\\w+$/;\n    if (\n      !options.android.extension ||\n      !options.ios.extension ||\n      !extensionRegex.test(options.android.extension) ||\n      !extensionRegex.test(options.ios.extension)\n    ) {\n      throw new Error(`Your file extensions must match ${extensionRegex.toString()}.`);\n    }\n\n    if (!this._canRecord) {\n      if (eventEmitter) {\n        this._subscription = eventEmitter.addListener(\n          'Expo.Recording.recorderUnloaded',\n          this._cleanupForUnloadedRecorder\n        );\n      }\n\n      const {\n        uri,\n        status,\n      }: {\n        uri: string;\n        // status is of type RecordingStatus, but without the canRecord field populated\n        status: Pick<RecordingStatus, Exclude<keyof RecordingStatus, 'canRecord'>>;\n      } = await ExponentAV.prepareAudioRecorder(options);\n\n      _recorderExists = true;\n      this._uri = uri;\n      this._options = options;\n      this._canRecord = true;\n\n      const currentStatus = { ...status, canRecord: true };\n      this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n      this._enablePollingIfNecessaryAndPossible();\n      return currentStatus;\n    } else {\n      throw new Error('This Recording object is already prepared to record.');\n    }\n  }\n\n  async startAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.startAudioRecording());\n  }\n\n  async pauseAsync(): Promise<RecordingStatus> {\n    return this._performOperationAndHandleStatusAsync(() => ExponentAV.pauseAudioRecording());\n  }\n\n  async stopAndUnloadAsync(): Promise<RecordingStatus> {\n    if (!this._canRecord) {\n      if (this._isDoneRecording) {\n        throw new Error('Cannot unload a Recording that has already been unloaded.');\n      } else {\n        throw new Error('Cannot unload a Recording that has not been prepared.');\n      }\n    }\n    // We perform a separate native API call so that the state of the Recording can be updated with\n    // the final duration of the recording. (We cast stopStatus as Object to appease Flow)\n    const finalStatus = await ExponentAV.stopAudioRecording();\n    await ExponentAV.unloadAudioRecorder();\n    return this._cleanupForUnloadedRecorder(finalStatus);\n  }\n\n  // Read API\n\n  getURI(): string | null {\n    return this._uri;\n  }\n\n  async createNewLoadedSound(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    console.warn(\n      `createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name`\n    );\n    return this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate);\n  }\n\n  async createNewLoadedSoundAsync(\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> {\n    if (this._uri == null || !this._isDoneRecording) {\n      throw new Error('Cannot create sound when the Recording has not finished!');\n    }\n    return Sound.createAsync(\n      // $FlowFixMe: Flow can't distinguish between this literal and Asset\n      { uri: this._uri },\n      initialStatus,\n      onPlaybackStatusUpdate,\n      false\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Constants from 'expo-constants';\nimport qs from 'qs';\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from \"./Linking/Linking\";\nvar BASE_URL = \"https://auth.expo.io\";\nvar _authLock = false;\n\nfunction startAsync(options) {\n  var returnUrl, authUrl, startUrl, result, _parseUrl, params, errorCode;\n\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          returnUrl = options.returnUrl || getDefaultReturnUrl();\n          authUrl = options.authUrl;\n          startUrl = getStartUrl(authUrl, returnUrl);\n\n          if (authUrl) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n\n        case 5:\n          if (!_authLock) {\n            _context.next = 8;\n            break;\n          }\n\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n\n          return _context.abrupt(\"return\", {\n            type: 'locked'\n          });\n\n        case 8:\n          _authLock = true;\n          _context.prev = 9;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl));\n\n        case 12:\n          result = _context.sent;\n\n        case 13:\n          _context.prev = 13;\n          _authLock = false;\n          return _context.finish(13);\n\n        case 16:\n          if (result) {\n            _context.next = 18;\n            break;\n          }\n\n          throw new Error('Unexpected missing AuthSession result');\n\n        case 18:\n          if (result.url) {\n            _context.next = 24;\n            break;\n          }\n\n          if (!result.type) {\n            _context.next = 23;\n            break;\n          }\n\n          return _context.abrupt(\"return\", result);\n\n        case 23:\n          throw new Error('Unexpected AuthSession result with missing type');\n\n        case 24:\n          _parseUrl = parseUrl(result.url), params = _parseUrl.params, errorCode = _parseUrl.errorCode;\n          return _context.abrupt(\"return\", {\n            type: errorCode ? 'error' : 'success',\n            params: params,\n            errorCode: errorCode,\n            url: result.url\n          });\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9,, 13, 16]]);\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nfunction _openWebBrowserAsync(startUrl, returnUrl) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl));\n\n        case 2:\n          result = _context2.sent;\n\n          if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            type: result.type\n          });\n\n        case 5:\n          return _context2.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nfunction getStartUrl(authUrl, returnUrl) {\n  var queryString = qs.stringify({\n    authUrl: authUrl,\n    returnUrl: returnUrl\n  });\n  return getRedirectUrl() + \"/start?\" + queryString;\n}\n\nfunction getRedirectUrl() {\n  var redirectUrl = BASE_URL + \"/\" + Constants.manifest.id;\n\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl() {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url) {\n  var parts = url.split('#');\n  var hash = parts[1];\n  var partsWithoutHash = parts[0].split('?');\n  var queryString = partsWithoutHash[partsWithoutHash.length - 1];\n  var parsedSearch = qs.parse(queryString);\n  var errorCode = parsedSearch.errorCode;\n  delete parsedSearch.errorCode;\n  var parsedHash = {};\n\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  var params = _objectSpread({}, parsedSearch, {}, parsedHash);\n\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}\n\nfunction _warnIfAnonymous(id, url) {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n  }\n}\n\nexport default {\n  dismiss: dismiss,\n  getRedirectUrl: getRedirectUrl,\n  getStartUrl: getStartUrl,\n  getDefaultReturnUrl: getDefaultReturnUrl,\n\n  get getRedirectUri() {\n    console.warn('Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)');\n    return getRedirectUrl;\n  },\n\n  startAsync: startAsync\n};","map":{"version":3,"sources":["../src/AuthSession.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport qs from 'qs';\n\nimport { openAuthSessionAsync, dismissAuthSession } from 'expo-web-browser';\nimport Linking from './Linking/Linking';\n\ntype AuthSessionOptions = {\n  authUrl: string;\n  returnUrl?: string;\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismiss' | 'locked' }\n  | {\n      type: 'error' | 'success';\n      errorCode: string | null;\n      params: { [key: string]: string };\n      url: string;\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  // $FlowIssue: Flow thinks the awaited result can be a promise\n  let result = await openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  return Linking.makeUrl('expo-auth-session');\n}\n\nfunction parseUrl(url: string): { errorCode: string | null; params: { [key: string]: string } } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
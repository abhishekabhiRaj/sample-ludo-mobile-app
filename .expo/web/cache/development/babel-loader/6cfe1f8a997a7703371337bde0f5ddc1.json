{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { CodedError } from '@unimodules/core';\n\nfunction getExpoPackage() {\n  try {\n    return require('expo/package.json');\n  } catch (error) {\n    throw new CodedError('ERR_CONSTANTS', 'expoVersion & expoRuntimeVersion require the expo package to be installed.');\n  }\n}\n\nvar parser = new UAParser();\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nvar _sessionId = uuidv4();\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get installationId() {\n    var installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: canUseDOM ? UAParser(navigator.userAgent) : undefined\n    };\n  },\n\n  get isHeadless() {\n    return false;\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get isDetached() {\n    return false;\n  },\n\n  get expoVersion() {\n    return getExpoPackage().version;\n  },\n\n  get linkingUri() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return getExpoPackage().version;\n  },\n\n  get deviceName() {\n    var _parser$getResult = parser.getResult(),\n        browser = _parser$getResult.browser,\n        engine = _parser$getResult.engine,\n        OS = _parser$getResult.os;\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get manifest() {\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  getWebViewUserAgentAsync: function getWebViewUserAgentAsync() {\n    return _regeneratorRuntime.async(function getWebViewUserAgentAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!canUseDOM) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", navigator.userAgent);\n\n          case 4:\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,+BAA1B;AACA,OAAO,QAAP,MAAqB,cAArB;AACA,OAAO,MAAP,MAAmB,SAAnB;AACA,SAAS,UAAT,QAA2B,kBAA3B;;AAIA,SAAS,cAAT,GAAuB;EACrB,IAAI;IACF,OAAO,OAAO,CAAC,mBAAD,CAAd;EACD,CAFD,CAEE,OAAO,KAAP,EAAc;IACd,MAAM,IAAI,UAAJ,CACJ,eADI,EAEJ,4EAFI,CAAN;EAID;AACF;;AAED,IAAM,MAAM,GAAG,IAAI,QAAJ,EAAf;AACA,IAAM,MAAM,GAAG,gCAAf;;AAQA,IAAM,UAAU,GAAG,MAAM,EAAzB;;AAEA,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,mBAAP;EACD,CAHY;;EAIb,IAAI,YAAJ,GAAgB;IACd,OAAO,MAAP;EACD,CANY;;EAOb,IAAI,cAAJ,GAAkB;IAChB,IAAI,cAAJ;;IACA,IAAI;MACF,cAAc,GAAG,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAjB;;MACA,IAAI,cAAc,IAAI,IAAlB,IAA0B,OAAO,cAAP,KAA0B,QAAxD,EAAkE;QAChE,cAAc,GAAG,MAAM,EAAvB;QACA,YAAY,CAAC,OAAb,CAAqB,MAArB,EAA6B,cAA7B;MACD;IACF,CAND,CAME,OAAO,KAAP,EAAc;MACd,cAAc,GAAG,UAAjB;IACD,CARD,SAQU;MACR,OAAO,cAAP;IACD;EACF,CApBY;;EAqBb,IAAI,SAAJ,GAAa;IACX,OAAO,UAAP;EACD,CAvBY;;EAwBb,IAAI,QAAJ,GAAY;IACV,OAAO;MAAE,GAAG,EAAE,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,SAAX,CAAX,GAAmC;IAAnD,CAAP;EACD,CA1BY;;EA2Bb,IAAI,UAAJ,GAAc;IACZ,OAAO,KAAP;EACD,CA7BY;;EA8Bb,IAAI,QAAJ,GAAY;IAEV,OAAO,IAAP;EACD,CAjCY;;EAkCb,IAAI,UAAJ,GAAc;IACZ,OAAO,KAAP;EACD,CApCY;;EAqCb,IAAI,WAAJ,GAAe;IACb,OAAO,cAAc,GAAG,OAAxB;EACD,CAvCY;;EAwCb,IAAI,UAAJ,GAAc;IACZ,IAAI,SAAJ,EAAe;MAEb,OAAO,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,QAAlC;IACD,CAHD,MAGO;MACL,OAAO,EAAP;IACD;EACF,CA/CY;;EAgDb,IAAI,kBAAJ,GAAsB;IACpB,OAAO,cAAc,GAAG,OAAxB;EACD,CAlDY;;EAmDb,IAAI,UAAJ,GAAc;IAAA,wBACwB,MAAM,CAAC,SAAP,EADxB;IAAA,IACJ,OADI,qBACJ,OADI;IAAA,IACK,MADL,qBACK,MADL;IAAA,IACiB,EADjB,qBACa,EADb;;IAGZ,OAAO,OAAO,CAAC,IAAR,IAAgB,MAAM,CAAC,IAAvB,IAA+B,EAAE,CAAC,IAAlC,IAA0C,SAAjD;EACD,CAvDY;;EAwDb,IAAI,gBAAJ,GAAoB;IAClB,OAAO,IAAP;EACD,CA1DY;;EA2Db,IAAI,kBAAJ,GAAsB;IACpB,OAAO,IAAP;EACD,CA7DY;;EA8Db,IAAI,WAAJ,GAAe;IAEb,OAAO,EAAP;EACD,CAjEY;;EAkEb,IAAI,eAAJ,GAAmB;IACjB,OAAO,CAAP;EACD,CApEY;;EAqEb,IAAI,eAAJ,GAAmB;IAEjB,OAAO,IAAP;EACD,CAxEY;;EAyEb,IAAI,QAAJ,GAAY;IAGV,OAAO,OAAO,CAAC,GAAR,CAAY,YAAZ,IAA4B,EAAnC;EACD,CA7EY;;EA8Eb,IAAI,aAAJ,GAAiB;IACf,IAAI,SAAJ,EAAe;MACb,OAAO,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,QAAlC;IACD,CAFD,MAEO;MACL,OAAO,EAAP;IACD;EACF,CApFY;;EAqFb,IAAI,SAAJ,GAAa;IACX,OAAO,OAAP;EACD,CAvFY;;EAwFP,wBAxFO;IAAA;MAAA;QAAA;UAAA;YAAA,KAyFP,SAzFO;cAAA;cAAA;YAAA;;YAAA,iCA0FF,SAAS,CAAC,SA1FR;;UAAA;YAAA,iCA4FF,IA5FE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { CodedError } from '@unimodules/core';\n\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nfunction getExpoPackage() {\n  try {\n    return require('expo/package.json');\n  } catch (error) {\n    throw new CodedError(\n      'ERR_CONSTANTS',\n      'expoVersion & expoRuntimeVersion require the expo package to be installed.'\n    );\n  }\n}\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? UAParser(navigator.userAgent) : undefined };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string {\n    return getExpoPackage().version;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string {\n    return getExpoPackage().version;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
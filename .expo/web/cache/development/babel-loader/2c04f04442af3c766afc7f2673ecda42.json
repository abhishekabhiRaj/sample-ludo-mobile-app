{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isWeb = Platform.OS === 'web';\nvar isInClient = !isWeb && Constants.appOwnership === 'expo';\nvar isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nvar loaded = {};\nvar loadPromises = {};\n\nfunction fontFamilyNeedsScoping(name) {\n  return (isInClient || isInIOSStandalone) && !Constants.systemFonts.includes(name) && name !== 'System' && !name.includes(Constants.sessionId);\n}\n\nexport function processFontFamily(name) {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\" + name + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + name + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n\n    return 'System';\n  }\n\n  return \"ExpoFont-\" + _getNativeFontName(name);\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport function loadAsync(nameOrMap, source) {\n  var fontMap, names, name, asset;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof nameOrMap === 'object')) {\n            _context2.next = 6;\n            break;\n          }\n\n          fontMap = nameOrMap;\n          names = Object.keys(fontMap);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return loadAsync(name, fontMap[name]);\n          })));\n\n        case 5:\n          return _context2.abrupt(\"return\");\n\n        case 6:\n          name = nameOrMap;\n\n          if (!loaded[name]) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 9:\n          if (!loadPromises[name]) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", loadPromises[name]);\n\n        case 11:\n          if (source) {\n            _context2.next = 13;\n            break;\n          }\n\n          throw new Error(\"No source from which to load font \\\"\" + name + \"\\\"\");\n\n        case 13:\n          asset = _getAssetForSource(source);\n\n          loadPromises[name] = function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(_loadSingleFontAsync(name, asset));\n\n                  case 3:\n                    loaded[name] = true;\n\n                  case 4:\n                    _context.prev = 4;\n                    delete loadPromises[name];\n                    return _context.finish(4);\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]]);\n          }();\n\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(loadPromises[name]);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nfunction _getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  return source;\n}\n\nfunction _loadSingleFontAsync(name, asset) {\n  return _regeneratorRuntime.async(function _loadSingleFontAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n\n        case 2:\n          if (asset.downloaded) {\n            _context3.next = 4;\n            break;\n          }\n\n          throw new Error(\"Failed to download asset for font \\\"\" + name + \"\\\"\");\n\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\n\nfunction _getNativeFontName(name) {\n  if (fontFamilyNeedsScoping(name)) {\n    return Constants.sessionId + \"-\" + name;\n  } else {\n    return name;\n  }\n}\n\nif (module && module.exports) {\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get: function get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n\n      return {\n        processFontFamily: processFontFamily,\n        isLoaded: isLoaded,\n        isLoading: isLoading,\n        loadAsync: loadAsync\n      };\n    }\n  });\n}","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nfunction fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}